# To change settings go to bottom

proc cmd_loop {} {
	set cmds_hist ""
	set cmds ""
	set is_running 1
	global hist_fname
	global prompt
	global sandbox

	set cmds_hist [cmd_hist_load $hist_fname]
	set cmds [dict create " " [dict create acl_hdlr ::autocomp]]

	set term_prms_orig [readcmd::term_set_raw]
	set term_prms_raw [readcmd::term_get_prms]

	while {$is_running} {
		set cmd [readcmd::read_sync [subst $prompt] $cmds_hist $cmds \
		  "exit" {\[|\]|\$|[^][\$\s]+}]
		puts ""
		if {($cmd ne "") && ($cmd ne "exit")} {
			lappend cmds_hist $cmd
		}
		if {$cmd eq "exit"} {
			set is_running 0
		} else {
			readcmd::term_set_prms $term_prms_orig
			# Quotes and semicolon are here only to suppress a convertion
			# of cmd to bytecode where a refcount of variable
			# that embedded in cmd is incremented.
			if {[catch {$sandbox eval "$cmd;"} res]} {
				puts $::errorInfo
			} else {
				if {$res ne ""} {
					puts $res
				}
			}
			# To decr refcount for the result.
			unset -nocomplain res
			readcmd::term_set_prms $term_prms_raw
		}

	}

	readcmd::term_unset_raw $term_prms_orig

	cmd_hist_save $cmds_hist $hist_fname
}

proc cmd_hist_save {hist fname} {
	global hist_size
	set cnt [llength $hist]

	set i [expr {$cnt - $hist_size}]
	if {$i < 0} {
		set i 0
	}
	set fh [open $fname w]
	for {} {$i < $cnt} {incr i} {
		puts $fh [cmd_hist_entry_escape [lindex $hist $i]]
	}
	close $fh
}

proc cmd_hist_load {fname} {
	set hist [list]

	try {
		set fh [open $fname r]
	} trap {POSIX ENOENT} {} {
		return $hist
	}
	while {[gets $fh line] >= 0} {
		lappend hist [cmd_hist_entry_unescape $line]
	}
	close $fh

	return $hist
}

proc cmd_hist_entry_escape {entry} {
	return [string map {% %% \n \\n \\ \\\\} $entry]
}

proc cmd_hist_entry_unescape {entry} {
	return [string map {%% % \\n \n \\\\ \\} $entry]
}

proc autocomp {toks ttc} {
	set ret ""
	set state 0
	set pattern ""
	global sandbox

	if {(([llength $toks] == 0) && ($ttc ne "\$")) ||
	    ([lindex $toks end] eq "\[") ||
	    ($ttc eq "\[")} {
		if {$ttc ne "\["} {
			set pattern [string map {* \\* ? \\? [ \\[ ] \\] \\ \\\\} $ttc]
		}
		foreach i [lsort [$sandbox eval [list info commands "${pattern}*"]]] {
			lappend ret [list "$i " ""]
		}
	} elseif {([lindex $toks end] eq "\$") ||
	          ($ttc eq "\$")} {
		if {$ttc ne "\$"} {
			set pattern [string map {* \\* ? \\? [ \\[ ] \\] \\ \\\\} $ttc]
		}
		foreach i [lsort [$sandbox eval [list info vars "${pattern}*"]]] {
			lappend ret [list "$i " ""]
		}
	} elseif {([string index $ttc 0] eq "/") ||
	          ([string equal -length 2 $ttc "./"])} {
		set pattern [string map {* \\* ? \\? [ \\[ ] \\] \\ \\\\} $ttc]
		foreach i [lsort [$sandbox eval [list glob -nocomplain "${pattern}*"]]] {
			if {[$sandbox eval [list file isdirectory $i]]} {
				lappend ret [list "$i/" ""]
			} else {
				lappend ret [list "$i " ""]
			}
		}
	}
	if {[string equal -length 2 :: $ttc]} {
		set idx [string last : $ttc]
		if {[string index $ttc $idx-1] eq ":"} {
			set ns [string range $ttc 0 $idx]
			set pattern [string range $ttc $idx+1 end]
		} else {
			set ns [string range $ttc 0 $idx-1]
			set pattern [string range $ttc $idx+1 end]
		}
		foreach i [lsort [$sandbox eval [list namespace children $ns "${pattern}*"]]] {
			lappend ret [list "${i}::" ""]
		}
	}
	return $ret
}

######################################################################
# MAIN
######################################################################
if {$::tcl_interactive} {
	set hist_fname "~/.tclsh_history"
	set hist_size 1000
	set prompt "\x1b\\\[01;34mTCL\[clock format \[clock seconds\] -format (%H:%M)\]>\x1b\\\[0m "

	# A local lib location
	lappend auto_path ~/work/libs/tcl
	package require readcmd

	set sandbox [interp create]

	cmd_loop
	exit
}
